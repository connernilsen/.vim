set nocompatible " don't use vi compatibility
filetype plugin indent on " turn on indentation and plugins for recognized file types

" tab settings
set shiftwidth=4 " number of spaces used in an auto indent step
set shiftround " << and >> round to shiftwidth
aug filetypes
    " clear all commands in this aug and recreate (otherwise they will be
    " duplicated)
    au!
    " files with the pattern TARGETS are python files
    au BufNewFile,BufRead TARGETS set filetype=python
aug END
set expandtab tabstop=4
" NOTE: flip tabs/spaces with :retab


" visual settings
set number " show line numbers
aug numbertoggle
    au!
    " show absolute line number and relative line numbers for currently active window
    au BufEnter,FocusGained,InsertLeave,WinEnter * if &number && mode() != "i" | set rnu | endif
    " show absolute line number for inactive windows
    au BufLeave,FocusLost,InsertEnter,WinLeave * if &number | set nornu | endif
aug END
set cursorline " light highlight for line showing cursor position
set incsearch " show current typed in stuff
set showmatch " jump to matching bracket
set hlsearch " set highlight for last search until :noh
if winheight(0) <= 32
    " when <= 32 lines in terminal, keep 5 lines between cursor and top or bottom
    set scrolloff=5
else
    " otherwise, dynamically scale number of lines between cursor and top or bottom
    let &scrolloff=float2nr(ceil(winheight(0)/4.5))
endif
set sidescrolloff=10 " number of cols to keep between cursor and left or right of buff
set sidescroll=1 " scroll one character at a time
set noshowmode " handled by lightline
set list  " show hidden characters
set lcs=tab:>-,trail:Â·,extends:>,precedes:< " markings to show for hidden characters

" behavior settings
set autoindent " automatically set indent of new line
set smartindent " clever autoindenting
set smartcase " ignore case when a capital letter appears
set ignorecase " mostly ignore case when searching (see smartcase)
set spell " highlight spelling mistakes
set laststatus=2 " always show status line
set visualbell " use visual bell instead of beeping
" create undo directory
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir " set undo directory
set undofile " save and restore undo history when editing files
" create session directory (NOTE: this doesn't populate anything there)
let sdir=$HOME."/.vim/session-dir/"
if !isdirectory(sdir)
    call mkdir(sdir, "", 0700)
endif
let g:workspace_session_directory=sdir " create a new workspace with \s
set completeopt=menu,preview,noinsert " when completing with Ctrl + N in insert mode, don't insert values
set nojs " don't use two spaces after joining a line ending with .
syntax enable " enable syntax highlighting
set splitbelow " split new windows on bottom
set splitright " split new windows to the right
set backspace=2 " backspace twice when editing eol/sol

" set clipboard settings (might need xclip)
if system('uname -s') == "Darwin\n"
  set clipboard=unnamed "OSX
  set clipboard+=unnamedplus
else
  set clipboard+=unnamedplus
  set clipboard=unnamedplus "Linux
endif

if has('nvim')
  let &packpath = &runtimepath 
endif

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'
" Plugin list begin

" Plugin 'drewtempelmeyer/palenight.vim' " theme
Plugin 'dracula/vim',{'name':'dracula'}  " theme
Plugin 'itchyny/lightline.vim'           " meta info at bottom of screen
Plugin 'thaerkh/vim-workspace'
Plugin 'tpope/vim-commentary'            " make comments using gcc or <motion>gc
Plugin 'nathanaelkane/vim-indent-guides' " show indentation guides
Plugin 'sheerun/vim-polyglot'            " language helpers
Plugin 'jiangmiao/auto-pairs'            " helpers for parentheses
Plugin 'yuttie/comfortable-motion.vim'   " smooth scroll up/down/page/back
Plugin 'breuckelen/vim-resize'           " easy resize with arrow keys
Plugin 'godlygeek/tabular'               " align text (:Tabularize /<regex>/[lcr]<spacing>...)
Plugin 'blueyed/vim-diminactive'         " dim inactive windows
Plugin 'ervandew/supertab'               " tab completion
Plugin 'junegunn/vim-peekaboo'           " check registers when ctrl + r
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'                " fuzzy finder
Plugin 'dense-analysis/ale'              " async lint engine
Plugin 'maximbaz/lightline-ale'          " lightline support for ALE 
Plugin 'google/vim-searchindex'          " count number of searches returned from / or ?
Plugin 'chrisbra/NrrwRgn'                " narrow to selected region with :NW/NR
Plugin 'pseewald/vim-anyfold'            " auto populate folds for many languages
Plugin 'konfekt/fastfold'                " only update fold information on fold operations
Plugin 'tpope/vim-surround'              " plugin for working with text objects
Plugin 'kien/rainbow_parentheses.vim'

" Plugin list end
call vundle#end()

" Brief help
" :PluginList - list plugins
" :PluginInstall - installs plugins
" :PluginUpdate - update plugin
" :PluginSearch foo - searches for foo
" :PluginClean - confirms removal of unused plugins
" see :h vundle for help

" only lint on save TODO: is this fixing the segfault issue?
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0

let g:LargeFile = 1000000 " file is large if size greater than 1MB
aug anyfold
    au!
    au Filetype * AnyFoldActivate " activate folding for all filetypes
aug end
" disable anyfold for large files
au BufReadPre,BufRead * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
function LargeFile()
    aug anyfold
        au! " remove AnyFoldActivate
        au Filetype <filetype> setlocal foldmethod=indent " fall back to indent folding
    aug END
endfunction



" turn on indent guides
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_auto_colors=0
let g:indent_guides_guide_size=4
aug coloring
    au!
    " set color scheme and indent guides
    au VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=DarkGrey
aug END

" format on save
let g:ale_fix_on_save = 1

" use enhanced coloring if possible
if (has("termguicolors"))
  set termguicolors
endif

" set color scheme
set background=dark
colorscheme dracula

let g:lightline = {
  \ 'colorscheme': 'dracula',
  \ }

let g:lightline.component_expand = {
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_infos': 'lightline#ale#infos',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \ }

let g:lightline.component_type = {
  \  'linter_checking': 'right',
  \  'linter_infos': 'right',
  \  'linter_warnings': 'warning',
  \  'linter_errors': 'error',
  \  'linter_ok': 'right',
  \ }

let g:lightline.active = {
  \ 'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
  \            [ 'lineinfo' ],
  \            [ 'percent' ],
  \            [ 'fileformat', 'filetype'], ],
  \ 'left':  [ [ 'mode', 'paste' ],
  \            [ 'readonly', 'filename', 'modified' ],
  \            [ 'obsession_status' ], ],
  \ }

let g:lightline.component_function = {
  \ "obsession_status": "ObsessionStatus"
  \ }

" comfortable motion setup
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_impulse_multiplier = 1  
nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 1.5)<CR>
nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -1.5)<CR>
nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 3)<CR>
nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -3)<CR>

" completion engine with ALE
set omnifunc=ale#completion#OmniFunc
" go to next errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)


" turn on rainbow parentheses by default
aug rainbowparens
    au!
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
    au Syntax * RainbowParenthesesLoadChevrons
aug END

" workspace settings
nnoremap <leader>s :ToggleWorkspace<CR>
let g:workspace_session_disable_on_args=1 " when starting with a specific file, don't open workspace
let g:workspace_autosave_always=1 " autosave when leaving insert, idling, or switching buffers
let g:workspace_persist_undo_history=0 " use vim default undo history

" ocaml stuff

if system("opam --version")
    let g:opamshare = substitute(system('opam config var share'),'\n$','','''') . "/merlin/vim"
    set rtp+=g:opamshare
    set rtp^="/home/connernilsen/.opam/5.0.0/share/ocp-indent/vim"
endif

" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

"function! OpamConfOcpIndent()
"  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
"endfunction
"let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')
"
"function! OpamConfOcpIndex()
"  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
"endfunction
"let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["merlin"] " \"ocp-indent\", \"ocp-index\"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
" ## added by OPAM user-setup for vim / ocp-indent ## 384537deb83808602c18b93aefa51543 ## you can edit, but keep this line
" if count(s:opam_available_tools,"ocp-indent") == 0
"   source "/home/connernilsen/.opam/4.14.0/share/ocp-indent/vim/indent/ocaml.vim"
" endif
" ## end of OPAM user-setup addition for vim / ocp-indent ## keep this line
